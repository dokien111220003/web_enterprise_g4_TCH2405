import { File } from 'better-xlsx';
import { saveAs } from 'file-saver';

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

function getDefaultFontName() {
  var _navigator;

  if (typeof navigator === 'undefined') return 'Microsoft YaHei';
  var isMac = /macintosh|mac os x/i.test((_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.userAgent.toLowerCase());
  return isMac ? 'PingFang SC' : 'Microsoft YaHei';
}

var STYLEMAP = {
  border: function border(cell) {
    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var border = style.border;
    var borderColor = style.borderColor || 'FF000000';
    if (!border) return;
    cell.style.border.top = 'thin';
    cell.style.border.topColor = borderColor;
    cell.style.border.right = 'thin';
    cell.style.border.rightColor = borderColor;
    cell.style.border.bottom = 'thin';
    cell.style.border.bottomColor = borderColor;
    cell.style.border.left = 'thin';
    cell.style.border.leftColor = borderColor;
  },
  background: function background(cell) {
    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var background = style.background;

    if (background) {
      // FF 表示不透明 00 表示透明
      // fg 前景色 bg 背景色
      cell.style.fill.patternType = 'solid';
      cell.style.fill.fgColor = background;
      cell.style.fill.bgColor = 'ffffffff';
    }
  },
  fontSize: function fontSize(cell) {
    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var fontSize = style.fontSize;

    if (fontSize) {
      cell.style.font.size = fontSize;
    }
  },
  fontName: function fontName(cell) {
    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var fontName = style.fontName;

    if (fontName) {
      cell.style.font.name = fontName;
    }
  },
  color: function color(cell) {
    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var color = style.color;

    if (color) {
      cell.style.font.color = color;
    }
  },
  bold: function bold(cell) {
    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var bold = style.bold;

    if (bold) {
      cell.style.font.bold = bold;
    }
  },
  i: function i(cell) {
    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var i = style.i;

    if (i) {
      cell.style.font.i = i;
    }
  },
  u: function u(cell) {
    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var u = style.u;

    if (u) {
      cell.style.font.u = u;
    }
  },
  h: function h(cell) {
    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var h = style.h;

    if (h) {
      cell.style.align.h = h;
    }
  },
  indent: function indent(cell) {
    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var indent = style.indent;

    if (indent) {
      cell.style.align.indent = indent;
    }
  },
  shrinkToFit: function shrinkToFit(cell) {
    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var shrinkToFit = style.shrinkToFit;

    if (shrinkToFit) {
      cell.style.align.shrinkToFit = shrinkToFit;
    }
  },
  textRotation: function textRotation(cell) {
    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var textRotation = style.textRotation;

    if (textRotation) {
      cell.style.align.textRotation = textRotation;
    }
  },
  v: function v(cell) {
    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var v = style.v;

    if (v) {
      cell.style.align.v = v;
    }
  },
  wrapText: function wrapText(cell) {
    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var wrapText = style.wrapText;

    if (wrapText) {
      cell.style.align.wrapText = wrapText;
    }
  }
};

function setStyle(cell) {
  var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var fontName = style.fontName;

  if (!fontName) {
    cell.style.font.name = getDefaultFontName();
  }

  for (var _i = 0, _Object$keys = Object.keys(style); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];

    if (key in STYLEMAP) {
      //@ts-ignore
      STYLEMAP[key](cell, style);
    }
  }
}

function drawCell(cell, props) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var value = props.value,
      _props$hMerge = props.hMerge,
      hMerge = _props$hMerge === void 0 ? 0 : _props$hMerge,
      _props$vMerge = props.vMerge,
      vMerge = _props$vMerge === void 0 ? 0 : _props$vMerge,
      numFmt = props.numFmt,
      formula = props.formula,
      cellType = props.cellType,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style;
  var str2num = config.str2num,
      str2Percent = config.str2Percent; // 尝试将值转化为数字

  if (str2num) {
    var num = Number(value);

    if (!isNaN(num)) {
      cell.value = num;
    } else {
      // 可能是千分位
      var _num = String(value).replaceAll(',', '');

      var isThousand = !isNaN(Number(_num));

      if (isThousand) {
        cell.value = Number(_num);
        cell.numFmt = thousandToNumFmt(_num);
      } else {
        cell.value = value;
      }
    }
  } else {
    cell.value = value;
  }

  if (str2Percent && String(value).endsWith('%')) {
    // 可以转化为百分比的话进行设置
    var _num2 = Number(String(value).slice(0, -1));

    if (!isNaN(_num2)) {
      cell.value = Number(_num2) / 100;
      cell.numFmt = percentToNumFmt(_num2);
    }
  } // 声明了公式


  if (formula) {
    cell.setFormula(formula);
    return;
  } // 指定了单元格类型


  if (cellType) {
    if (cellType === 'TypeDate') {
      cell.setDate(new Date(value));
    } else {
      cell.cellType = cellType;
    } // return;

  } // 指定了单元格格式


  if (numFmt) {
    cell.numFmt = numFmt;
  } // 合并


  cell.hMerge = hMerge;
  cell.vMerge = vMerge;

  if (vMerge) {
    style.v = 'center';
  }

  setStyle(cell, style);
}

function getDecimal(data) {
  var str = String(data);
  var pointIndex = str.indexOf('.');
  if (pointIndex === -1) return 0;
  var decimalPart = str.slice(pointIndex + 1);
  return decimalPart.length;
}

function thousandToNumFmt(data) {
  var decimal = getDecimal(data);
  var numFmts = ['#,##0', '#,##0.0', '#,##0.00', '#,##0.000', '#,##0.0000'];
  return numFmts[decimal] || numFmts[4];
}

function percentToNumFmt(data) {
  var decimal = getDecimal(data);
  var numFmts = ['0%', '0.0%', '0.00%', '0.000%', '0.0000%'];
  return numFmts[decimal] || numFmts[2];
}

// export interface ITreeNode {
//   title: string;
//   x: number;
//   xMerge: number;
//   vMerge: number;
//   children: ITreeNode[] | null;
// }
function columnsFilter(columns) {
  return columns.filter(function (col) {
    if (col.__ignore__) return false;

    if (col.children) {
      col.children = columnsFilter(col.children);
    }

    return true;
  });
}
function getColumnsMaxDepth(columns) {
  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var maxs = columns.map(function (col) {
    return getColumnDepth(col, depth);
  });
  return Math.max.apply(Math, maxs);
}

function getColumnDepth(column) {
  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  if (column.children) {
    return getColumnsMaxDepth(column.children, depth + 1);
  }

  return depth;
}

function getColumnsMaxLength(columns) {
  return columns.reduce(function (prev, cur) {
    return prev + getColumnLength(cur);
  }, 0);
}

function getColumnLength(column) {
  if (column.children) {
    return getColumnsMaxLength(column.children);
  }

  return 1;
}

function flatColumns(columns) {
  return columns.reduce(function (prev, cur) {
    return prev.concat(flatColumn(cur));
  }, []);
}

function flatColumn(column) {
  if (column.children) {
    return flatColumns(column.children);
  }

  return [column];
}

/**
 * 渲染表格头
 * @param excel TExcel
 * @param columns 传入的表头配置，antd table columns props
 * @param style 表头样式
 * @param depth 表头深度
 * @param x 开始绘制的单元格，第几列
 * @param y 开始绘制的单元格，第几行
 */

function renderThead(excel, columns, style, depth) {
  var x = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var y = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  var _iterator = _createForOfIteratorHelper(columns),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _col$children, _col$children2;

      var col = _step.value;
      var colLen = getColumnsMaxLength([col]);
      var cell = excel.sheet.cell(y, x);
      var value = '';

      if (typeof col.__excelTitle__ === 'string') {
        value = col.__excelTitle__;
      } else {
        if (typeof col.title === 'string') {
          value = col.title;
        } else {
          throw new Error('title must be a string, or use __excelTitle__');
        }
      }

      var hMerge = colLen - 1;
      var vMerge = 0;

      if (!((_col$children = col.children) === null || _col$children === void 0 ? void 0 : _col$children.length)) {
        vMerge = depth - 1 - y;
      }

      drawCell(cell, {
        value: value,
        hMerge: hMerge,
        vMerge: vMerge,
        style: _objectSpread2({
          h: hMerge ? 'center' : 'left'
        }, style)
      });

      if ((_col$children2 = col.children) === null || _col$children2 === void 0 ? void 0 : _col$children2.length) {
        renderThead(excel, col.children, style, depth, x, y + 1);
      }

      x += hMerge ? hMerge + 1 : 1;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

/**
 * 获取column render的结果的参数
 * @param data column render的结果
 */
function getColumnRenderValue(data) {
  var o = {
    children: '',
    colSpan: 0,
    rowSpan: 0,
    __style__: {}
  };

  if (_typeof(data) !== 'object') {
    o.children = data;
    return o;
  } // 单纯的react节点


  if (data.$$typeof) {
    o.children = getChildren(data);
  } // 混合react节点和属性


  if (data.children) {
    if (_typeof(data.children) === 'object') {
      o.children = getChildren(data.children);
    } else {
      o.children = data.children;
    }
  }

  if (data.props) {
    var _data$props, _data$props2;

    o.colSpan = ((_data$props = data.props) === null || _data$props === void 0 ? void 0 : _data$props.colSpan) || 0;
    o.rowSpan = ((_data$props2 = data.props) === null || _data$props2 === void 0 ? void 0 : _data$props2.rowSpan) || 0;

    if (o.colSpan >= 1) {
      o.colSpan -= 1;
    }

    if (o.rowSpan >= 1) {
      o.rowSpan -= 1;
    }
  }

  if (data.__style__) {
    o.__style__ = data.__style__;
  }

  return o;
}

function getChildren(data) {
  var _ref = data || {},
      props = _ref.props;

  if (typeof props.children === 'string') return props.children;
  return props.children.reduce(function (prev, cur) {
    if (typeof prev === 'string') {
      return prev + ' ' + getChildren(cur);
    }

    return getChildren(prev) + ' ' + getChildren(cur);
  }, '');
}

function getValueByStrPath(data, keys) {
  if (_typeof(keys) !== 'object') return data[keys];

  if (!Array.isArray(keys)) {
    console.error('excel-dataIndex: Expected string or string[]');
    return '';
  }

  var index = 0;
  var key = keys[0];
  var value = data;

  try {
    while (key) {
      value = value[key];
      index++;
      key = keys[index];
    }
  } catch (e) {
    return '';
  }

  if (_typeof(value) !== 'object') {
    return value;
  }

  console.error('excel-cell-value: Unexpected object');
  return '';
}

function renderTbody(excel, dataSource, allColumns) {
  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  dataSource.forEach(function (data, index) {
    var row = excel.addRow();
    row.setHeightCM(excel.rowHeight);

    for (var i = 0; i < allColumns.length; i++) {
      var column = allColumns[i];

      var dataIndex = column.dataIndex,
          __cellType__ = column.__cellType__,
          __numFmt__ = column.__numFmt__,
          _column$__style__ = column.__style__,
          __style__ = _column$__style__ === void 0 ? {} : _column$__style__;

      var value = getValueByStrPath(data, dataIndex);
      var cell = excel.sheet.cell(excel.currentRow - 1, excel.currentCol + i);
      var hMerge = 0;
      var vMerge = 0;
      var renderValue = null;
      var cellStyle = {};
      var formula = void 0;

      if (column.excelRender) {
        renderValue = column.excelRender(value, data, index);
      } else if (column.render) {
        renderValue = column.render(value, data, index);
      }

      if (renderValue !== null) {
        var _getColumnRenderValue = getColumnRenderValue(renderValue),
            children = _getColumnRenderValue.children,
            colSpan = _getColumnRenderValue.colSpan,
            rowSpan = _getColumnRenderValue.rowSpan,
            _style__ = _getColumnRenderValue.__style__;

        value = children;
        hMerge = colSpan;
        vMerge = rowSpan;
        cellStyle = _style__;

        if (cellStyle && cellStyle.height) {
          row.setHeightCM(cellStyle.height);
        }
      }

      if (column.__cellType__ === "TypeFormula") {
        formula = renderValue;
      }

      drawCell(cell, {
        value: value,
        formula: formula,
        hMerge: hMerge,
        vMerge: vMerge,
        cellType: __cellType__,
        numFmt: __numFmt__,
        style: _objectSpread2(_objectSpread2(_objectSpread2({}, excel.defaultTbodyCellStyle), __style__), cellStyle)
      }, config);
    }
  });
}

/**
 * 添加行
 * @param excel Excel实例
 * @param count 行数
 * @param height 行高(单位: CM)
 */
function addRow(excel, start, count, height) {
  for (var i = start; i < count + start; i++) {
    var row = excel.addRow();

    if (row.setHeightCM) {
      row.setHeightCM(height);
    }
  }
}

// mac office 145px = 20cm
function px2cm(px) {
  return Math.floor(20 / 145 * px);
}

function addCol(excel, start, count, props) {
  for (var i = start; i < count + start; i++) {
    var col = excel.addCol();

    if (col) {
      drawCol(col, props[i - start]);
    }
  }
}

function drawCol(col, props) {
  var _props$width = props.width,
      width = _props$width === void 0 ? 150 : _props$width,
      _props$align = props.align,
      align = _props$align === void 0 ? 'left' : _props$align,
      _props$__style__ = props.__style__,
      __style__ = _props$__style__ === void 0 ? {} : _props$__style__,
      __numFmt__ = props.__numFmt__;

  if (width) {
    col.width = px2cm(width);
  }

  if (__style__.width) {
    col.width = __style__.width;
  }

  if (__numFmt__) {
    col.numFmt = __numFmt__;
  }

  setStyle(col, _objectSpread2(_objectSpread2({}, __style__), {}, {
    h: align
  }));
}

var Excel = /*#__PURE__*/function () {
  function Excel() {
    _classCallCheck(this, Excel);

    this.file = void 0;
    this.sheet = void 0;
    this.columns = void 0;
    this.currentRow = 0;
    this.currentCol = 0;
    this.defaultTheadCellStyle = {
      background: 'FF88c849',
      color: 'FF333333',
      fontSize: 12,
      bold: true,
      border: true,
      v: 'center',
      wrapText: true
    };
    this.defaultTbodyCellStyle = {
      v: 'bottom',
      wrapText: true,
      fontSize: 12
    };
    this.rowHeight = 1;
    this.file = new File();
  }
  /**
   * 添加工作表
   * @param name 工作表名称
   */


  _createClass(Excel, [{
    key: "addSheet",
    value: function addSheet(name) {
      if (!this.file) return this;
      this.currentRow = 0;
      this.currentCol = 0;
      this.sheet = this.file.addSheet(name);
      return this;
    }
    /**
     * 添加一行
     * @returns
     */

  }, {
    key: "addRow",
    value: function addRow() {
      if (!this.sheet) {
        throw new Error('please use addSheet before this');
      }
      this.currentRow++;
      return this.sheet.row(this.sheet.maxRow);
    }
    /**
     * 添加一列
     * @returns
     */

  }, {
    key: "addCol",
    value: function addCol() {
      if (!this.sheet) {
        throw new Error('please use addSheet before this');
      }
      this.currentCol++;
      return this.sheet.col(this.sheet.maxCol);
    }
  }, {
    key: "drawCell",
    value: function drawCell$1(x, y, props) {
      if (!this.sheet) {
        throw new Error('please use addSheet before this');
      }
      var vMerge = (props === null || props === void 0 ? void 0 : props.vMerge) || 0;
      var rows = vMerge + 1;

      if (this.currentRow < y + rows) {
        for (var i = 0; i < rows; i++) {
          this.addRow();
        }
      }

      var cell = this.sheet.cell(y, x);

      drawCell(cell, props);

      return this;
    }
    /**
     * 设置行高
     * @param value number
     * @param unit 单位 'cm' | 'px'，默认为px
     */

  }, {
    key: "setRowHeight",
    value: function setRowHeight(value) {
      var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'px';

      if (typeof value !== 'number') {
        throw new Error('value must be a number');
      }

      var v = value;

      if (unit === 'px') {
        v = px2cm(v);
      }

      this.rowHeight = v;
      return this;
    }
    /**
     * 添加表格配置
     * @param columns antd table columns
     * @param direction 'h' | 'v' 添加的方向，适用于追加表
     */

  }, {
    key: "addColumns",
    value: function addColumns(columns) {
      if (!this.sheet) {
        throw new Error('please use addSheet before this');
      }

      var x = this.currentCol;
      var y = this.sheet.maxRow;
      var filteredColumns = columnsFilter(columns);
      var maxDepth = getColumnsMaxDepth(filteredColumns);
      var maxLength = getColumnsMaxLength(filteredColumns);
      var flatedColumns = flatColumns(filteredColumns);
      addRow(this, this.currentRow, maxDepth, this.rowHeight);
      addCol(this, this.currentCol, maxLength, flatedColumns);
      renderThead(this, filteredColumns, this.defaultTheadCellStyle, y + maxDepth, x, y);
      this.columns = filteredColumns;
      this.currentCol -= maxLength;
      return this;
    }
    /**
     * 添加数据
     * @param dataSource 数据
     * @param config 表格体配置
     */

  }, {
    key: "addDataSource",
    value: function addDataSource(dataSource) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!this.sheet || !this.columns) {
        throw new Error('please use addSheet and addColumns before this');
      }
      var flatedColumns = flatColumns(this.columns);
      renderTbody(this, dataSource, flatedColumns, config);
      return this;
    }
    /**
     * 更改默认的表格头单元格样式属性，不包含表格体
     * @param style 单元格样式属性
     */

  }, {
    key: "setTHeadStyle",
    value: function setTHeadStyle(style) {
      this.defaultTheadCellStyle = _objectSpread2(_objectSpread2({}, this.defaultTheadCellStyle), style);
      return this;
    }
    /**
     * 更改默认的单元格样式属性，不包含表格头
     * @param style 单元格样式属性
     */

  }, {
    key: "setTBodyStyle",
    value: function setTBodyStyle(style) {
      this.defaultTbodyCellStyle = _objectSpread2(_objectSpread2({}, this.defaultTbodyCellStyle), style);
      return this;
    }
    /**
     * 另存为
     * @param name 名称
     * @param type 保存类型 'blob' | 'base64'
     * @param compress 是否压缩 boolean
     */

  }, {
    key: "saveAs",
    value: function saveAs$1(name) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'blob';
      var compress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      if (!this.file) return;

      if (type === 'blob') {
        this.file.saveAs(type, compress).then(function (data) {
          saveAs(data, name);
        }).catch(function (e) {
          console.error(e);
        });
      }
    }
  }]);

  return Excel;
}();

export { Excel };
