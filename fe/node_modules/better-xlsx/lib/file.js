"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.File = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _sheet = require("./sheet");

var templates = _interopRequireWildcard(require("./templates"));

var _reftable = require("./reftable");

var _xmlWorkbook = require("./xmlWorkbook");

var _xmlContentTypes = require("./xmlContentTypes");

var _xmlStyle = require("./xmlStyle");

var _jszip = _interopRequireDefault(require("jszip"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * This is the main class, use it:
 *
 * ```js
 * import { File } from 'better-xlsx';
 * const file = new File();
 * const sheet = file.addSheet('Sheet-1');
 * ```
 *
 * @class File
 */
var File = /*#__PURE__*/function () {
  /**
   * @private
   */

  /**
   * @private
   */

  /**
   * @private
   */
  function File() {
    (0, _classCallCheck2.default)(this, File);
    (0, _defineProperty2.default)(this, "sheet", {});
    (0, _defineProperty2.default)(this, "sheets", []);
    (0, _defineProperty2.default)(this, "definedNames", []);

    /**
     * @private
     */
    this.styles = new _xmlStyle.XstyleSheet({});
  }
  /**
   * Add a new Sheet, with the provided name, to a File
   * @param {String} name Name of the Sheet
   * @return {Sheet}
   */


  (0, _createClass2.default)(File, [{
    key: "addSheet",
    value: function addSheet(name) {
      if (this.sheet[name]) {
        throw new Error(`duplicate sheet name ${name}.`);
      }

      var sheet = new _sheet.Sheet({
        name,
        file: this,
        selected: this.sheets.length === 0
      });
      this.sheet[name] = sheet;
      this.sheets.push(sheet);
      return sheet;
    }
    /**
     * Save the File to an xlsx file.
     * @param  {String} [type='nodebuffer'] For Node.js use `nodebuffer` and browser use `blob` or `base64`.
     * @param {Boolean} [compress=false] For file compression.
     * @return {Promise|stream} For Node.js return `stream` and browser return Promise.
     */

  }, {
    key: "saveAs",
    value: function saveAs() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'nodebuffer';
      var compress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var parts = this.makeParts();
      var zip = new _jszip.default();

      for (var _i = 0, _Object$keys = Object.keys(parts); _i < _Object$keys.length; _i++) {
        var key = _Object$keys[_i];
        zip.file(key, parts[key]);
      }

      var compression = compress ? 'DEFLATE' : 'STORE';

      if (type === 'blob' || type === 'base64') {
        return zip.generateAsync({
          type,
          compression
        });
      } else {
        return zip.generateNodeStream({
          type: 'nodebuffer',
          compression
        });
      }
    }
    /**
     * @private
     * @return {Object} XML files mapping object
     */

  }, {
    key: "makeParts",
    value: function makeParts() {
      var parts = {};
      var refTable = new _reftable.RefTable();
      var types = (0, _xmlContentTypes.makeXTypes)();
      var workbook = (0, _xmlWorkbook.makeXworkbook)();
      this.styles.reset();
      var i = 1;
      var sheets = new _xmlWorkbook.Xsheets();

      var _iterator = _createForOfIteratorHelper(this.sheets),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var sheet = _step.value;
          var xSheet = sheet.makeXSheet(refTable, this.styles);
          types.children.push(new _xmlContentTypes.XOverride({
            PartName: `/xl/worksheets/sheet${i}.xml`,
            ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'
          }));
          sheets.children.push(new _xmlWorkbook.Xsheet({
            name: sheet.name,
            sheetId: i,
            'r:id': `rId${i}`,
            state: 'visible'
          }));
          parts[`xl/worksheets/sheet${i}.xml`] = xSheet.render();
          i++;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      workbook.sheets = sheets;
      parts['xl/workbook.xml'] = workbook.render();
      parts['_rels/.rels'] = templates.DOT_RELS;
      parts['docProps/app.xml'] = templates.DOCPROPS_APP;
      parts['docProps/core.xml'] = templates.DOCPROPS_CORE;
      parts['xl/theme/theme1.xml'] = templates.XL_THEME_THEME;
      parts['xl/sharedStrings.xml'] = refTable.makeXsst().render();
      parts['xl/_rels/workbook.xml.rels'] = (0, _xmlWorkbook.makeWorkbookRels)(this.sheets.length).render();
      parts['[Content_Types].xml'] = types.render();
      parts['xl/styles.xml'] = this.styles.render();
      return parts;
    }
  }]);
  return File;
}();

exports.File = File;