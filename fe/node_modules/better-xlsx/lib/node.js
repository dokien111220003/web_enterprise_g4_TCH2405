"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.props = props;
exports.Node = exports.HEAD = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function attrEscape(str) {
  return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/\t/g, '&#x9;').replace(/\n/g, '&#xA;').replace(/\r/g, '&#xD;');
}

function escape(str) {
  return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');
}

var HEAD = Symbol('head');
exports.HEAD = HEAD;

function props() {
  for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {
    keys[_key] = arguments[_key];
  }

  return function (target) {
    var _iterator = _createForOfIteratorHelper(keys),
        _step;

    try {
      var _loop = function _loop() {
        var key = _step.value;
        target.elements.push({
          key,
          kind: 'method',
          placement: 'prototype',
          descriptor: {
            get() {
              if (this.attributes) {
                return this.attributes[key];
              }
            },

            set(value) {
              if (this.attributes === undefined) {
                this.attributes = {};
              }

              this.attributes[key] = value;
            },

            configurable: true,
            enumerable: true
          }
        });
      };

      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return target;
  };
}

var Node = /*#__PURE__*/function () {
  function Node() {
    var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var name = arguments.length > 2 ? arguments[2] : undefined;
    (0, _classCallCheck2.default)(this, Node);

    for (var _i = 0, _Object$keys = Object.keys(attributes); _i < _Object$keys.length; _i++) {
      var key = _Object$keys[_i];
      this[key] = attributes[key];
    }

    this.children = children;
    this.__name = name || this.constructor.name.substring(1);
  }

  (0, _createClass2.default)(Node, [{
    key: "render",
    value: function render() {
      function walk(tree) {
        var name = tree.__name;
        var attributes = tree.attributes,
            children = tree.children;
        var tokens = [];

        if (tree[HEAD]) {
          tokens.push(tree[HEAD]);
        }

        tokens.push(`<${name}`);

        for (var _i2 = 0, _Object$keys2 = Object.keys(attributes || {}); _i2 < _Object$keys2.length; _i2++) {
          var key = _Object$keys2[_i2];
          var v = attributes[key];
          if (v === undefined) continue;

          if (typeof v === 'string') {
            v = attrEscape(v);
          }

          if (typeof v === 'boolean') {
            v = v ? 1 : 0;
          }

          tokens.push(` ${key}="${v}"`);
        }

        if (!children.length) {
          tokens.push('/>');
          return tokens;
        }

        tokens.push('>');

        var _iterator2 = _createForOfIteratorHelper(children),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var child = _step2.value;

            if (child instanceof Node) {
              tokens.push(child.render());
            } else if (typeof child === 'string') {
              tokens.push(escape(child));
            } else {
              tokens.push(child.toString());
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        tokens.push(`</${name}>`);
        return tokens;
      }

      return walk(this).join('');
    }
  }]);
  return Node;
}();

exports.Node = Node;