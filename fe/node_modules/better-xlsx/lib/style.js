"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleStyle = handleStyle;
exports.handleNumFmtId = handleNumFmtId;
exports.Alignment = exports.Font = exports.Fill = exports.Border = exports.Style = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _xmlStyle = require("./xmlStyle");

function handleStyle(style, numFmtId, styles) {
  var _style$makeXStyleElem = style.makeXStyleElements(),
      xFont = _style$makeXStyleElem.xFont,
      xFill = _style$makeXStyleElem.xFill,
      xBorder = _style$makeXStyleElem.xBorder,
      xXf = _style$makeXStyleElem.xXf;

  var fontId = styles.addFont(xFont);
  var fillId = styles.addFill(xFill); // HACK - adding light grey fill, as in OO and Google

  var greyfill = new _xmlStyle.Xfill({
    patternFill: new _xmlStyle.XpatternFill({
      patternType: 'lightGray'
    })
  });
  styles.addFill(greyfill);
  var borderId = styles.addBorder(xBorder);
  xXf.fontId = fontId;
  xXf.fillId = fillId;
  xXf.borderId = borderId;
  xXf.numFmtId = numFmtId; // apply the numFmtId when it is not the default cellxf

  if (xXf.numFmtId > 0) {
    xXf.applyNumberFormat = true;
  }

  xXf.alignment.horizontal = style.align.h;
  xXf.alignment.indent = style.align.indent;
  xXf.alignment.shrinkToFit = style.align.shrinkToFit;
  xXf.alignment.textRotation = style.align.textRotation;
  xXf.alignment.vertical = style.align.v;
  xXf.alignment.wrapText = style.align.wrapText;
  return styles.addCellXf(xXf);
}

function handleNumFmtId(numFmtId, styles) {
  var xf = new _xmlStyle.Xxf({
    numFmtId
  });

  if (numFmtId > 0) {
    xf.applyNumberFormat = true;
  }

  return styles.addCellXf(xf);
}
/**
 * Style class for set Cell styles.
 */


var Style = /*#__PURE__*/function () {
  function Style() {
    (0, _classCallCheck2.default)(this, Style);
    (0, _defineProperty2.default)(this, "applyBorder", false);
    (0, _defineProperty2.default)(this, "applyFill", false);
    (0, _defineProperty2.default)(this, "applyFont", false);
    (0, _defineProperty2.default)(this, "applyAlignment", false);
    (0, _defineProperty2.default)(this, "namedStyleIndex", null);

    /**
     * Cell border
     * @type {Border}
     */
    this.border = new Border({});
    /**
     * Cell fill background or foreground
     * @type {Fill}
     */

    this.fill = new Fill({});
    /**
     * Cell font
     * @type {Font}
     */

    this.font = new Font({});
    /**
     * Cell alignment
     * @type {Alignment}
     */

    this.align = new Alignment({});
  }

  (0, _createClass2.default)(Style, [{
    key: "makeXStyleElements",
    value: function makeXStyleElements() {
      var xFont = new _xmlStyle.Xfont({
        sz: this.font.size,
        name: this.font.name,
        family: this.font.family,
        charset: this.font.charset,
        color: this.font.color,
        b: this.font.bold,
        i: this.font.italic,
        u: this.font.underline
      });
      var xFill = new _xmlStyle.Xfill({
        patternFill: new _xmlStyle.XpatternFill({
          patternType: this.fill.patternType,
          fgColor: this.fill.fgColor,
          bgColor: this.fill.bgColor
        })
      });
      var xBorder = new _xmlStyle.Xborder({
        left: {
          style: this.border.left,
          color: this.border.leftColor
        },
        right: {
          style: this.border.right,
          color: this.border.rightColor
        },
        top: {
          style: this.border.top,
          color: this.border.topColor
        },
        bottom: {
          style: this.border.bottom,
          color: this.border.bottomColor
        }
      });
      var xXf = new _xmlStyle.Xxf({
        numFmtId: 0,
        applyBorder: this.applyBorder,
        applyFill: this.applyFill,
        applyFont: this.applyFont,
        applyAlignment: this.applyAlignment
      });
      xXf.alignment = new _xmlStyle.Xalignment({
        horizontal: this.align.h,
        indent: this.align.indent,
        shrinkToFit: this.align.shrinkToFit,
        textRotation: this.align.textRotation,
        vertical: this.align.v,
        wrapText: this.align.wrapText
      });

      if (this.namedStyleIndex !== null) {
        xXf.xfId = this.namedStyleIndex;
      }

      return {
        xFont,
        xFill,
        xBorder,
        xXf
      };
    }
  }]);
  return Style;
}();
/**
 * Border of the Style and border type have: `none`, `thin`, `medium`, `thick`, `dashed`, `dotted`, `double`
 *
 */


exports.Style = Style;

var Border =
/**
 * left border color
 * @type {String}
 */

/**
 * right border color
 * @type {String}
 */

/**
 * top border color
 * @type {String}
 */

/**
 * bottom border color
 * @type {String}
 */
function Border(_ref) {
  var _ref$left = _ref.left,
      left = _ref$left === void 0 ? 'none' : _ref$left,
      _ref$right = _ref.right,
      right = _ref$right === void 0 ? 'none' : _ref$right,
      _ref$top = _ref.top,
      top = _ref$top === void 0 ? 'none' : _ref$top,
      _ref$bottom = _ref.bottom,
      bottom = _ref$bottom === void 0 ? 'none' : _ref$bottom;
  (0, _classCallCheck2.default)(this, Border);
  (0, _defineProperty2.default)(this, "leftColor", undefined);
  (0, _defineProperty2.default)(this, "rightColor", undefined);
  (0, _defineProperty2.default)(this, "topColor", undefined);
  (0, _defineProperty2.default)(this, "bottomColor", undefined);

  /**
   * left border type
   * @type {String}
   */
  this.left = left;
  /**
   * right border type
   * @type {String}
   */

  this.right = right;
  /**
   * top border type
   * @type {String}
   */

  this.top = top;
  /**
   * bottom border type
   * @type {String}
   */

  this.bottom = bottom;
};
/**
 * Fill of the Style
 */


exports.Border = Border;

var Fill = function Fill(_ref2) {
  var _ref2$patternType = _ref2.patternType,
      patternType = _ref2$patternType === void 0 ? 'none' : _ref2$patternType,
      _ref2$fgColor = _ref2.fgColor,
      fgColor = _ref2$fgColor === void 0 ? 'FFFFFFFF' : _ref2$fgColor,
      _ref2$bgColor = _ref2.bgColor,
      bgColor = _ref2$bgColor === void 0 ? '00000000' : _ref2$bgColor;
  (0, _classCallCheck2.default)(this, Fill);

  /**
   * pattern type of the fill
   * @type {String}
   */
  this.patternType = patternType;
  /**
   * foreground color of the fill
   * @type {String}
   */

  this.fgColor = fgColor;
  /**
   * background color of the fill
   * @type {String}
   */

  this.bgColor = bgColor;
};
/**
 * Font of the Style
 */


exports.Fill = Fill;

var Font =
/**
 * font color
 * @type {String}
 */

/**
 * Is bold style
 * @type {Boolean}
 */

/**
 * Is italic style
 * @type {Boolean}
 */

/**
 * IS underline style
 * @type {Boolean}
 */
function Font(_ref3) {
  var _ref3$size = _ref3.size,
      size = _ref3$size === void 0 ? 12 : _ref3$size,
      _ref3$name = _ref3.name,
      name = _ref3$name === void 0 ? 'Verdana' : _ref3$name;
  (0, _classCallCheck2.default)(this, Font);
  (0, _defineProperty2.default)(this, "family", 0);
  (0, _defineProperty2.default)(this, "charset", 0);
  (0, _defineProperty2.default)(this, "color", undefined);
  (0, _defineProperty2.default)(this, "bold", false);
  (0, _defineProperty2.default)(this, "italic", false);
  (0, _defineProperty2.default)(this, "underline", false);

  /**
   * font size [default 12]
   * @type {Number}
   */
  this.size = size;
  this.name = name;
};
/**
 * Alignment of the Style.
 */


exports.Font = Font;

var Alignment = function Alignment(_ref4) {
  var _ref4$h = _ref4.h,
      h = _ref4$h === void 0 ? 'general' : _ref4$h,
      _ref4$v = _ref4.v,
      v = _ref4$v === void 0 ? 'bottom' : _ref4$v;
  (0, _classCallCheck2.default)(this, Alignment);
  (0, _defineProperty2.default)(this, "indent", 0);
  (0, _defineProperty2.default)(this, "shrinkToFit", false);
  (0, _defineProperty2.default)(this, "textRotation", 0);
  (0, _defineProperty2.default)(this, "wrapText", false);

  /**
   * Horizontal align: `general`, `center`, `left`, `right`
   * @type {String}
   */
  this.h = h;
  /**
   * Vertical align: `general`, `top`, `bottom`, `center`
   * @type {String}
   */

  this.v = v;
};

exports.Alignment = Alignment;