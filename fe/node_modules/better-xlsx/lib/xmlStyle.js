"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Xalignment = exports.Xxf = exports.XcellXfs = exports.XcellStyleXfs = exports.XcellStyle = exports.XcellStyles = exports.Xborder = exports.Xborders = exports.XpatternFill = exports.Xfill = exports.Xfills = exports.Xfont = exports.Xfonts = exports.XnumFmt = exports.XnumFmts = exports.XstyleSheet = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _node = require("./node");

var _lib = require("./lib");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _decorate(decorators, factory, superClass, mixins) { var api = _getDecoratorsApi(); if (mixins) { for (var i = 0; i < mixins.length; i++) { api = mixins[i](api); } } var r = factory(function initialize(O) { api.initializeInstanceElements(O, decorated.elements); }, superClass); var decorated = api.decorateClass(_coalesceClassElements(r.d.map(_createElementDescriptor)), decorators); api.initializeClassElements(r.F, decorated.elements); return api.runClassFinishers(r.F, decorated.finishers); }

function _getDecoratorsApi() { _getDecoratorsApi = function _getDecoratorsApi() { return api; }; var api = { elementsDefinitionOrder: [["method"], ["field"]], initializeInstanceElements: function initializeInstanceElements(O, elements) { ["method", "field"].forEach(function (kind) { elements.forEach(function (element) { if (element.kind === kind && element.placement === "own") { this.defineClassElement(O, element); } }, this); }, this); }, initializeClassElements: function initializeClassElements(F, elements) { var proto = F.prototype; ["method", "field"].forEach(function (kind) { elements.forEach(function (element) { var placement = element.placement; if (element.kind === kind && (placement === "static" || placement === "prototype")) { var receiver = placement === "static" ? F : proto; this.defineClassElement(receiver, element); } }, this); }, this); }, defineClassElement: function defineClassElement(receiver, element) { var descriptor = element.descriptor; if (element.kind === "field") { var initializer = element.initializer; descriptor = { enumerable: descriptor.enumerable, writable: descriptor.writable, configurable: descriptor.configurable, value: initializer === void 0 ? void 0 : initializer.call(receiver) }; } Object.defineProperty(receiver, element.key, descriptor); }, decorateClass: function decorateClass(elements, decorators) { var newElements = []; var finishers = []; var placements = { static: [], prototype: [], own: [] }; elements.forEach(function (element) { this.addElementPlacement(element, placements); }, this); elements.forEach(function (element) { if (!_hasDecorators(element)) return newElements.push(element); var elementFinishersExtras = this.decorateElement(element, placements); newElements.push(elementFinishersExtras.element); newElements.push.apply(newElements, elementFinishersExtras.extras); finishers.push.apply(finishers, elementFinishersExtras.finishers); }, this); if (!decorators) { return { elements: newElements, finishers: finishers }; } var result = this.decorateConstructor(newElements, decorators); finishers.push.apply(finishers, result.finishers); result.finishers = finishers; return result; }, addElementPlacement: function addElementPlacement(element, placements, silent) { var keys = placements[element.placement]; if (!silent && keys.indexOf(element.key) !== -1) { throw new TypeError("Duplicated element (" + element.key + ")"); } keys.push(element.key); }, decorateElement: function decorateElement(element, placements) { var extras = []; var finishers = []; for (var decorators = element.decorators, i = decorators.length - 1; i >= 0; i--) { var keys = placements[element.placement]; keys.splice(keys.indexOf(element.key), 1); var elementObject = this.fromElementDescriptor(element); var elementFinisherExtras = this.toElementFinisherExtras((0, decorators[i])(elementObject) || elementObject); element = elementFinisherExtras.element; this.addElementPlacement(element, placements); if (elementFinisherExtras.finisher) { finishers.push(elementFinisherExtras.finisher); } var newExtras = elementFinisherExtras.extras; if (newExtras) { for (var j = 0; j < newExtras.length; j++) { this.addElementPlacement(newExtras[j], placements); } extras.push.apply(extras, newExtras); } } return { element: element, finishers: finishers, extras: extras }; }, decorateConstructor: function decorateConstructor(elements, decorators) { var finishers = []; for (var i = decorators.length - 1; i >= 0; i--) { var obj = this.fromClassDescriptor(elements); var elementsAndFinisher = this.toClassDescriptor((0, decorators[i])(obj) || obj); if (elementsAndFinisher.finisher !== undefined) { finishers.push(elementsAndFinisher.finisher); } if (elementsAndFinisher.elements !== undefined) { elements = elementsAndFinisher.elements; for (var j = 0; j < elements.length - 1; j++) { for (var k = j + 1; k < elements.length; k++) { if (elements[j].key === elements[k].key && elements[j].placement === elements[k].placement) { throw new TypeError("Duplicated element (" + elements[j].key + ")"); } } } } } return { elements: elements, finishers: finishers }; }, fromElementDescriptor: function fromElementDescriptor(element) { var obj = { kind: element.kind, key: element.key, placement: element.placement, descriptor: element.descriptor }; var desc = { value: "Descriptor", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); if (element.kind === "field") obj.initializer = element.initializer; return obj; }, toElementDescriptors: function toElementDescriptors(elementObjects) { if (elementObjects === undefined) return; return (0, _toArray2.default)(elementObjects).map(function (elementObject) { var element = this.toElementDescriptor(elementObject); this.disallowProperty(elementObject, "finisher", "An element descriptor"); this.disallowProperty(elementObject, "extras", "An element descriptor"); return element; }, this); }, toElementDescriptor: function toElementDescriptor(elementObject) { var kind = String(elementObject.kind); if (kind !== "method" && kind !== "field") { throw new TypeError('An element descriptor\'s .kind property must be either "method" or' + ' "field", but a decorator created an element descriptor with' + ' .kind "' + kind + '"'); } var key = _toPropertyKey(elementObject.key); var placement = String(elementObject.placement); if (placement !== "static" && placement !== "prototype" && placement !== "own") { throw new TypeError('An element descriptor\'s .placement property must be one of "static",' + ' "prototype" or "own", but a decorator created an element descriptor' + ' with .placement "' + placement + '"'); } var descriptor = elementObject.descriptor; this.disallowProperty(elementObject, "elements", "An element descriptor"); var element = { kind: kind, key: key, placement: placement, descriptor: Object.assign({}, descriptor) }; if (kind !== "field") { this.disallowProperty(elementObject, "initializer", "A method descriptor"); } else { this.disallowProperty(descriptor, "get", "The property descriptor of a field descriptor"); this.disallowProperty(descriptor, "set", "The property descriptor of a field descriptor"); this.disallowProperty(descriptor, "value", "The property descriptor of a field descriptor"); element.initializer = elementObject.initializer; } return element; }, toElementFinisherExtras: function toElementFinisherExtras(elementObject) { var element = this.toElementDescriptor(elementObject); var finisher = _optionalCallableProperty(elementObject, "finisher"); var extras = this.toElementDescriptors(elementObject.extras); return { element: element, finisher: finisher, extras: extras }; }, fromClassDescriptor: function fromClassDescriptor(elements) { var obj = { kind: "class", elements: elements.map(this.fromElementDescriptor, this) }; var desc = { value: "Descriptor", configurable: true }; Object.defineProperty(obj, Symbol.toStringTag, desc); return obj; }, toClassDescriptor: function toClassDescriptor(obj) { var kind = String(obj.kind); if (kind !== "class") { throw new TypeError('A class descriptor\'s .kind property must be "class", but a decorator' + ' created a class descriptor with .kind "' + kind + '"'); } this.disallowProperty(obj, "key", "A class descriptor"); this.disallowProperty(obj, "placement", "A class descriptor"); this.disallowProperty(obj, "descriptor", "A class descriptor"); this.disallowProperty(obj, "initializer", "A class descriptor"); this.disallowProperty(obj, "extras", "A class descriptor"); var finisher = _optionalCallableProperty(obj, "finisher"); var elements = this.toElementDescriptors(obj.elements); return { elements: elements, finisher: finisher }; }, runClassFinishers: function runClassFinishers(constructor, finishers) { for (var i = 0; i < finishers.length; i++) { var newConstructor = (0, finishers[i])(constructor); if (newConstructor !== undefined) { if (typeof newConstructor !== "function") { throw new TypeError("Finishers must return a constructor."); } constructor = newConstructor; } } return constructor; }, disallowProperty: function disallowProperty(obj, name, objectType) { if (obj[name] !== undefined) { throw new TypeError(objectType + " can't have a ." + name + " property."); } } }; return api; }

function _createElementDescriptor(def) { var key = _toPropertyKey(def.key); var descriptor; if (def.kind === "method") { descriptor = { value: def.value, writable: true, configurable: true, enumerable: false }; } else if (def.kind === "get") { descriptor = { get: def.value, configurable: true, enumerable: false }; } else if (def.kind === "set") { descriptor = { set: def.value, configurable: true, enumerable: false }; } else if (def.kind === "field") { descriptor = { configurable: true, writable: true, enumerable: true }; } var element = { kind: def.kind === "field" ? "field" : "method", key: key, placement: def.static ? "static" : def.kind === "field" ? "own" : "prototype", descriptor: descriptor }; if (def.decorators) element.decorators = def.decorators; if (def.kind === "field") element.initializer = def.value; return element; }

function _coalesceGetterSetter(element, other) { if (element.descriptor.get !== undefined) { other.descriptor.get = element.descriptor.get; } else { other.descriptor.set = element.descriptor.set; } }

function _coalesceClassElements(elements) { var newElements = []; var isSameElement = function isSameElement(other) { return other.kind === "method" && other.key === element.key && other.placement === element.placement; }; for (var i = 0; i < elements.length; i++) { var element = elements[i]; var other; if (element.kind === "method" && (other = newElements.find(isSameElement))) { if (_isDataDescriptor(element.descriptor) || _isDataDescriptor(other.descriptor)) { if (_hasDecorators(element) || _hasDecorators(other)) { throw new ReferenceError("Duplicated methods (" + element.key + ") can't be decorated."); } other.descriptor = element.descriptor; } else { if (_hasDecorators(element)) { if (_hasDecorators(other)) { throw new ReferenceError("Decorators can't be placed on different accessors with for " + "the same property (" + element.key + ")."); } other.decorators = element.decorators; } _coalesceGetterSetter(element, other); } } else { newElements.push(element); } } return newElements; }

function _hasDecorators(element) { return element.decorators && element.decorators.length; }

function _isDataDescriptor(desc) { return desc !== undefined && !(desc.value === undefined && desc.writable === undefined); }

function _optionalCallableProperty(obj, name) { var value = obj[name]; if (value !== undefined && typeof value !== "function") { throw new TypeError("Expected '" + name + "' to be a function"); } return value; }

function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }

function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var XstyleSheet = _decorate([(0, _node.props)('xmlns')], function (_initialize, _Node) {
  var XstyleSheet = /*#__PURE__*/function (_Node2) {
    (0, _inherits2.default)(XstyleSheet, _Node2);

    var _super = _createSuper(XstyleSheet);

    function XstyleSheet(_ref, children) {
      var _this;

      var _ref$xmlns = _ref.xmlns,
          xmlns = _ref$xmlns === void 0 ? 'http://schemas.openxmlformats.org/spreadsheetml/2006/main' : _ref$xmlns;
      (0, _classCallCheck2.default)(this, XstyleSheet);
      _this = _super.call(this, {
        xmlns
      }, children);

      _initialize((0, _assertThisInitialized2.default)(_this));

      _this[_node.HEAD] = '<?xml version="1.0" encoding="UTF-8"?>';
      return _this;
    }

    return XstyleSheet;
  }(_Node);

  return {
    F: XstyleSheet,
    d: [{
      kind: "field",
      static: true,
      key: "name",

      value() {
        return "XstyleSheet";
      }

    }, {
      kind: "field",
      key: "fonts",

      value() {
        return null;
      }

    }, {
      kind: "field",
      key: "fills",

      value() {
        return null;
      }

    }, {
      kind: "field",
      key: "borders",

      value() {
        return null;
      }

    }, {
      kind: "field",
      key: "cellStyles",

      value() {
        return null;
      }

    }, {
      kind: "field",
      key: "cellStyleXfs",

      value() {
        return null;
      }

    }, {
      kind: "field",
      key: "cellXfs",

      value() {
        return null;
      }

    }, {
      kind: "field",
      key: "numFmts",

      value() {
        return null;
      }

    }, {
      kind: "field",
      key: "numFmtRefTable",

      value() {
        return {};
      }

    }, {
      kind: "method",
      key: "render",
      value: function render() {
        this.children = [];
        if (this.numFmts) this.children.push(this.numFmts);
        if (this.fonts) this.children.push(this.fonts);
        if (this.fills) this.children.push(this.fills);
        if (this.borders) this.children.push(this.borders);
        if (this.cellStyleXfs) this.children.push(this.cellStyleXfs);
        if (this.cellXfs) this.children.push(this.cellXfs);
        if (this.cellStyles) this.children.push(this.cellStyles);
        return (0, _get2.default)((0, _getPrototypeOf2.default)(XstyleSheet.prototype), "render", this).call(this);
      }
    }, {
      kind: "method",
      key: "reset",
      value: function reset() {
        this.children = [];
        this.fonts = new Xfonts();
        this.fills = new Xfills();
        this.borders = new Xborders();
        this.cellXfs = new XcellXfs({
          count: 1
        }, [new Xxf()]);
        this.numFmts = new XnumFmts();
        this.addBorder(new Xborder({
          left: {
            style: 'none'
          },
          right: {
            style: 'none'
          },
          top: {
            style: 'none'
          },
          bottom: {
            style: 'none'
          }
        }));
      }
    }, {
      kind: "method",
      key: "addFont",
      value: function addFont(xFont) {
        if (!xFont.name) return 0;
        var list = this.fonts.children;
        var len = list.length;

        for (var i = 0; i < list.length; i++) {
          if (xFont.equals(list[i])) return i;
        }

        list.push(xFont);
        this.fonts.count = list.length;
        return len;
      }
    }, {
      kind: "method",
      key: "addFill",
      value: function addFill(xFill) {
        var list = this.fills.children;
        var len = list.length;

        for (var i = 0; i < list.length; i++) {
          if (xFill.equals(list[i])) return i;
        }

        list.push(xFill);
        this.fills.count = list.length;
        return len;
      }
    }, {
      kind: "method",
      key: "addBorder",
      value: function addBorder(xBorder) {
        var list = this.borders.children;
        var len = list.length;

        for (var i = 0; i < list.length; i++) {
          if (xBorder.equals(list[i])) return i;
        }

        list.push(xBorder);
        this.borders.count = list.length;
        return len;
      }
    }, {
      kind: "method",
      key: "addCellXf",
      value: function addCellXf(xXf) {
        var list = this.cellXfs.children;
        var len = list.length;

        for (var i = 0; i < list.length; i++) {
          if (xXf.equals(list[i])) return i;
        }

        list.push(xXf);
        this.cellXfs.count = list.length;
        return len;
      }
    }, {
      kind: "method",
      key: "addNumFmt",
      value: function addNumFmt(xNumFmt) {
        if (xNumFmt.numFmtId <= _lib.NumFmtsCount) return;

        if (this.numFmtRefTable[xNumFmt.numFmtId] === undefined) {
          this.numFmts.children.push(xNumFmt);
          this.numFmts.count = this.numFmts.children.length;
          this.numFmtRefTable[xNumFmt.numFmtId] = xNumFmt;
        }
      }
    }, {
      kind: "method",
      key: "newNumFmt",
      value: function newNumFmt(formatCode) {
        if (!formatCode) return new XnumFmt({
          numFmtId: 0,
          formatCode: 'general'
        });
        var numFmtId = _lib.NumFmtInv[formatCode];

        if (numFmtId !== undefined) {
          return new XnumFmt({
            numFmtId,
            formatCode
          });
        }

        var _iterator = _createForOfIteratorHelper(this.numFmts.children),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var numFmt = _step.value;
            if (formatCode === numFmt.formatCode) return numFmt;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        numFmtId = _lib.NumFmtsCount + 1;

        do {
          if (this.numFmtRefTable[numFmtId]) {
            numFmtId++;
          } else {
            this.addNumFmt(new XnumFmt({
              numFmtId,
              formatCode
            }));
            break;
          }
        } while (1);

        return new XnumFmt({
          numFmtId,
          formatCode
        });
      }
    }]
  };
}, _node.Node);

exports.XstyleSheet = XstyleSheet;

var XnumFmts = _decorate([(0, _node.props)('count')], function (_initialize2, _Node3) {
  var XnumFmts = /*#__PURE__*/function (_Node4) {
    (0, _inherits2.default)(XnumFmts, _Node4);

    var _super2 = _createSuper(XnumFmts);

    function XnumFmts() {
      var _this2;

      (0, _classCallCheck2.default)(this, XnumFmts);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this2 = _super2.call.apply(_super2, [this].concat(args));

      _initialize2((0, _assertThisInitialized2.default)(_this2));

      return _this2;
    }

    return XnumFmts;
  }(_Node3);

  return {
    F: XnumFmts,
    d: [{
      kind: "field",
      static: true,
      key: "name",

      value() {
        return "XnumFmts";
      }

    }, {
      kind: "method",
      key: "render",
      value: function render() {
        if (this.count) return (0, _get2.default)((0, _getPrototypeOf2.default)(XnumFmts.prototype), "render", this).call(this);
        return '';
      }
    }]
  };
}, _node.Node);

exports.XnumFmts = XnumFmts;

var XnumFmt = _decorate([(0, _node.props)('numFmtId', 'formatCode')], function (_initialize3, _Node5) {
  var XnumFmt = /*#__PURE__*/function (_Node6) {
    (0, _inherits2.default)(XnumFmt, _Node6);

    var _super3 = _createSuper(XnumFmt);

    function XnumFmt() {
      var _this3;

      (0, _classCallCheck2.default)(this, XnumFmt);

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      _this3 = _super3.call.apply(_super3, [this].concat(args));

      _initialize3((0, _assertThisInitialized2.default)(_this3));

      return _this3;
    }

    return XnumFmt;
  }(_Node5);

  return {
    F: XnumFmt,
    d: [{
      kind: "field",
      static: true,
      key: "name",

      value() {
        return "XnumFmt";
      }

    }]
  };
}, _node.Node);

exports.XnumFmt = XnumFmt;

var Xfonts = _decorate([(0, _node.props)('count')], function (_initialize4, _Node7) {
  var Xfonts = /*#__PURE__*/function (_Node8) {
    (0, _inherits2.default)(Xfonts, _Node8);

    var _super4 = _createSuper(Xfonts);

    function Xfonts() {
      var _this4;

      (0, _classCallCheck2.default)(this, Xfonts);

      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      _this4 = _super4.call.apply(_super4, [this].concat(args));

      _initialize4((0, _assertThisInitialized2.default)(_this4));

      return _this4;
    }

    return Xfonts;
  }(_Node7);

  return {
    F: Xfonts,
    d: [{
      kind: "field",
      static: true,
      key: "name",

      value() {
        return "Xfonts";
      }

    }, {
      kind: "method",
      key: "render",
      value: function render() {
        if (this.count) return (0, _get2.default)((0, _getPrototypeOf2.default)(Xfonts.prototype), "render", this).call(this);
        return '';
      }
    }]
  };
}, _node.Node);

exports.Xfonts = Xfonts;

var Xfont = _decorate([(0, _node.props)('sz', 'name', 'family', 'charset', 'color', 'b', 'i', 'u')], function (_initialize5, _Node9) {
  var Xfont = /*#__PURE__*/function (_Node10) {
    (0, _inherits2.default)(Xfont, _Node10);

    var _super5 = _createSuper(Xfont);

    function Xfont() {
      var _this5;

      (0, _classCallCheck2.default)(this, Xfont);

      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      _this5 = _super5.call.apply(_super5, [this].concat(args));

      _initialize5((0, _assertThisInitialized2.default)(_this5));

      return _this5;
    }

    return Xfont;
  }(_Node9);

  return {
    F: Xfont,
    d: [{
      kind: "field",
      static: true,
      key: "name",

      value() {
        return "Xfont";
      }

    }, {
      kind: "method",
      key: "render",
      value: function render() {
        var str = '<font>';
        if (this.sz) str += `<sz val="${this.sz}"/>`;
        if (this.name) str += `<name val="${this.name}"/>`;
        if (this.family) str += `<family val="${this.family}"/>`;
        if (this.charset) str += `<charset val="${this.charset}"/>`;
        if (this.color) str += `<color rgb="${this.color}"/>`;
        if (this.b) str += '<b/>';
        if (this.i) str += '<i/>';
        if (this.u) str += '<u/>';
        return str + '</font>';
      }
    }, {
      kind: "method",
      key: "equals",
      value: function equals(o) {
        return this.sz === o.sz && this.name === o.name && this.family === o.family && this.charset === o.charset && this.color === o.color && this.b === o.b && this.i === o.i && this.u === o.u;
      }
    }]
  };
}, _node.Node);

exports.Xfont = Xfont;

var Xfills = _decorate([(0, _node.props)('count')], function (_initialize6, _Node11) {
  var Xfills = /*#__PURE__*/function (_Node12) {
    (0, _inherits2.default)(Xfills, _Node12);

    var _super6 = _createSuper(Xfills);

    function Xfills() {
      var _this6;

      (0, _classCallCheck2.default)(this, Xfills);

      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      _this6 = _super6.call.apply(_super6, [this].concat(args));

      _initialize6((0, _assertThisInitialized2.default)(_this6));

      return _this6;
    }

    return Xfills;
  }(_Node11);

  return {
    F: Xfills,
    d: [{
      kind: "field",
      static: true,
      key: "name",

      value() {
        return "Xfills";
      }

    }, {
      kind: "method",
      key: "render",
      value: function render() {
        if (this.count) return (0, _get2.default)((0, _getPrototypeOf2.default)(Xfills.prototype), "render", this).call(this);
        return '';
      }
    }]
  };
}, _node.Node);

exports.Xfills = Xfills;

var Xfill = _decorate([(0, _node.props)('patternFill')], function (_initialize7, _Node13) {
  var Xfill = /*#__PURE__*/function (_Node14) {
    (0, _inherits2.default)(Xfill, _Node14);

    var _super7 = _createSuper(Xfill);

    function Xfill() {
      var _this7;

      (0, _classCallCheck2.default)(this, Xfill);

      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      _this7 = _super7.call.apply(_super7, [this].concat(args));

      _initialize7((0, _assertThisInitialized2.default)(_this7));

      return _this7;
    }

    return Xfill;
  }(_Node13);

  return {
    F: Xfill,
    d: [{
      kind: "field",
      static: true,
      key: "name",

      value() {
        return "Xfill";
      }

    }, {
      kind: "method",
      key: "render",
      value: function render() {
        return `<fill>${this.patternFill.render()}</fill>`;
      }
    }, {
      kind: "method",
      key: "equals",
      value: function equals(o) {
        var pf1 = this.patternFill;
        var pf2 = o.patternFill;

        if (pf1 && pf2) {
          return pf1.patternType === pf2.patternType && pf1.fgColor === pf2.fgColor && pf1.bgColor === pf2.bgColor;
        }

        return !pf1 && !pf2;
      }
    }]
  };
}, _node.Node);

exports.Xfill = Xfill;

var XpatternFill = _decorate([(0, _node.props)('patternType', 'fgColor', 'bgColor')], function (_initialize8, _Node15) {
  var XpatternFill = /*#__PURE__*/function (_Node16) {
    (0, _inherits2.default)(XpatternFill, _Node16);

    var _super8 = _createSuper(XpatternFill);

    function XpatternFill() {
      var _this8;

      (0, _classCallCheck2.default)(this, XpatternFill);

      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      _this8 = _super8.call.apply(_super8, [this].concat(args));

      _initialize8((0, _assertThisInitialized2.default)(_this8));

      return _this8;
    }

    return XpatternFill;
  }(_Node15);

  return {
    F: XpatternFill,
    d: [{
      kind: "field",
      static: true,
      key: "name",

      value() {
        return "XpatternFill";
      }

    }, {
      kind: "method",
      key: "render",
      value: function render() {
        var str = `<patternFill patternType="${this.patternType}">`;
        if (this.fgColor) str += `<fgColor rgb="${this.fgColor}"/>`;
        if (this.bgColor) str += `<bgColor rgb="${this.bgColor}"/>`;
        return str + '</patternFill>';
      }
    }]
  };
}, _node.Node);

exports.XpatternFill = XpatternFill;

var Xborders = _decorate([(0, _node.props)('count')], function (_initialize9, _Node17) {
  var Xborders = /*#__PURE__*/function (_Node18) {
    (0, _inherits2.default)(Xborders, _Node18);

    var _super9 = _createSuper(Xborders);

    function Xborders() {
      var _this9;

      (0, _classCallCheck2.default)(this, Xborders);

      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }

      _this9 = _super9.call.apply(_super9, [this].concat(args));

      _initialize9((0, _assertThisInitialized2.default)(_this9));

      return _this9;
    }

    return Xborders;
  }(_Node17);

  return {
    F: Xborders,
    d: [{
      kind: "field",
      static: true,
      key: "name",

      value() {
        return "Xborders";
      }

    }, {
      kind: "method",
      key: "render",
      value: function render() {
        if (this.count) return (0, _get2.default)((0, _getPrototypeOf2.default)(Xborders.prototype), "render", this).call(this);
        return '';
      }
    }]
  };
}, _node.Node);

exports.Xborders = Xborders;

var Xborder = _decorate([(0, _node.props)('left', 'right', 'top', 'bottom')], function (_initialize10, _Node19) {
  var Xborder = /*#__PURE__*/function (_Node20) {
    (0, _inherits2.default)(Xborder, _Node20);

    var _super10 = _createSuper(Xborder);

    function Xborder() {
      var _this10;

      (0, _classCallCheck2.default)(this, Xborder);

      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }

      _this10 = _super10.call.apply(_super10, [this].concat(args));

      _initialize10((0, _assertThisInitialized2.default)(_this10));

      return _this10;
    }

    return Xborder;
  }(_Node19);

  return {
    F: Xborder,
    d: [{
      kind: "field",
      static: true,
      key: "name",

      value() {
        return "Xborder";
      }

    }, {
      kind: "method",
      key: "_renderLine",
      value: function _renderLine(pos) {
        var posVal = this[pos];
        if (!posVal) return '';
        var str = `<${pos} style="${posVal.style}">`;
        if (posVal.color) str += `<color rgb="${posVal.color}"/>`;
        return str + `</${pos}>`;
      }
    }, {
      kind: "method",
      key: "render",
      value: function render() {
        var str = '<border>';
        str += this._renderLine('left');
        str += this._renderLine('right');
        str += this._renderLine('top');
        str += this._renderLine('bottom');
        return str + '</border>';
      }
    }, {
      kind: "method",
      key: "equals",
      value: function equals(o) {
        var check = function check(a, b) {
          if (a && b) {
            return a.style === b.style && a.color === b.color;
          }

          return !a && !b;
        };

        return check(this.left, o.left) && check(this.right, o.right) && check(this.top, o.top) && check(this.bottom, o.bottom);
      }
    }]
  };
}, _node.Node);

exports.Xborder = Xborder;

var XcellStyles = _decorate([(0, _node.props)('count')], function (_initialize11, _Node21) {
  var XcellStyles = /*#__PURE__*/function (_Node22) {
    (0, _inherits2.default)(XcellStyles, _Node22);

    var _super11 = _createSuper(XcellStyles);

    function XcellStyles() {
      var _this11;

      (0, _classCallCheck2.default)(this, XcellStyles);

      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }

      _this11 = _super11.call.apply(_super11, [this].concat(args));

      _initialize11((0, _assertThisInitialized2.default)(_this11));

      return _this11;
    }

    return XcellStyles;
  }(_Node21);

  return {
    F: XcellStyles,
    d: [{
      kind: "field",
      static: true,
      key: "name",

      value() {
        return "XcellStyles";
      }

    }, {
      kind: "method",
      key: "render",
      value: function render() {
        if (this.count) return (0, _get2.default)((0, _getPrototypeOf2.default)(XcellStyles.prototype), "render", this).call(this);
        return '';
      }
    }]
  };
}, _node.Node);

exports.XcellStyles = XcellStyles;

var XcellStyle = _decorate([(0, _node.props)('builtInId', 'customBuiltIn', 'hidden', 'iLevel', 'name', 'xfId')], function (_initialize12, _Node23) {
  var XcellStyle = /*#__PURE__*/function (_Node24) {
    (0, _inherits2.default)(XcellStyle, _Node24);

    var _super12 = _createSuper(XcellStyle);

    function XcellStyle() {
      var _this12;

      (0, _classCallCheck2.default)(this, XcellStyle);

      for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
        args[_key11] = arguments[_key11];
      }

      _this12 = _super12.call.apply(_super12, [this].concat(args));

      _initialize12((0, _assertThisInitialized2.default)(_this12));

      return _this12;
    }

    return XcellStyle;
  }(_Node23);

  return {
    F: XcellStyle,
    d: [{
      kind: "field",
      static: true,
      key: "name",

      value() {
        return "XcellStyle";
      }

    }]
  };
}, _node.Node);

exports.XcellStyle = XcellStyle;

var XcellStyleXfs = _decorate([(0, _node.props)('count')], function (_initialize13, _Node25) {
  var XcellStyleXfs = /*#__PURE__*/function (_Node26) {
    (0, _inherits2.default)(XcellStyleXfs, _Node26);

    var _super13 = _createSuper(XcellStyleXfs);

    function XcellStyleXfs() {
      var _this13;

      (0, _classCallCheck2.default)(this, XcellStyleXfs);

      for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
        args[_key12] = arguments[_key12];
      }

      _this13 = _super13.call.apply(_super13, [this].concat(args));

      _initialize13((0, _assertThisInitialized2.default)(_this13));

      return _this13;
    }

    return XcellStyleXfs;
  }(_Node25);

  return {
    F: XcellStyleXfs,
    d: [{
      kind: "field",
      static: true,
      key: "name",

      value() {
        return "XcellStyleXfs";
      }

    }, {
      kind: "method",
      key: "render",
      value: function render() {
        if (this.count) return (0, _get2.default)((0, _getPrototypeOf2.default)(XcellStyleXfs.prototype), "render", this).call(this);
        return '';
      }
    }]
  };
}, _node.Node);

exports.XcellStyleXfs = XcellStyleXfs;

var XcellXfs = _decorate([(0, _node.props)('count')], function (_initialize14, _Node27) {
  var XcellXfs = /*#__PURE__*/function (_Node28) {
    (0, _inherits2.default)(XcellXfs, _Node28);

    var _super14 = _createSuper(XcellXfs);

    function XcellXfs() {
      var _this14;

      (0, _classCallCheck2.default)(this, XcellXfs);

      for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
        args[_key13] = arguments[_key13];
      }

      _this14 = _super14.call.apply(_super14, [this].concat(args));

      _initialize14((0, _assertThisInitialized2.default)(_this14));

      return _this14;
    }

    return XcellXfs;
  }(_Node27);

  return {
    F: XcellXfs,
    d: [{
      kind: "field",
      static: true,
      key: "name",

      value() {
        return "XcellXfs";
      }

    }, {
      kind: "method",
      key: "render",
      value: function render() {
        if (this.count) return (0, _get2.default)((0, _getPrototypeOf2.default)(XcellXfs.prototype), "render", this).call(this);
        return '';
      }
    }]
  };
}, _node.Node);

exports.XcellXfs = XcellXfs;

var Xxf = _decorate([(0, _node.props)('applyAlignment', 'applyBorder', 'applyFont', 'applyFill', 'applyNumberFormat', 'applyProtection', 'borderId', 'fillId', 'fontId', 'numFmtId', 'xfId')], function (_initialize15, _Node29) {
  var Xxf = /*#__PURE__*/function (_Node30) {
    (0, _inherits2.default)(Xxf, _Node30);

    var _super15 = _createSuper(Xxf);

    function Xxf(attrs, children) {
      var _this15;

      (0, _classCallCheck2.default)(this, Xxf);
      var defaults = {
        applyAlignment: false,
        applyBorder: false,
        applyFont: false,
        applyFill: false,
        applyNumberFormat: false,
        applyProtection: false,
        borderId: 0,
        fillId: 0,
        fontId: 0,
        numFmtId: 0
      };
      _this15 = _super15.call(this, _objectSpread(_objectSpread({}, defaults), attrs), children);

      _initialize15((0, _assertThisInitialized2.default)(_this15));

      _this15.alignment = new Xalignment();
      return _this15;
    }

    return Xxf;
  }(_Node29);

  return {
    F: Xxf,
    d: [{
      kind: "field",
      static: true,
      key: "name",

      value() {
        return "Xxf";
      }

    }, {
      kind: "method",
      key: "render",
      value: function render() {
        if (this.alignment) {
          this.children = [this.alignment];
        }

        return (0, _get2.default)((0, _getPrototypeOf2.default)(Xxf.prototype), "render", this).call(this);
      }
    }, {
      kind: "method",
      key: "equals",
      value: function equals(o) {
        return this.applyAlignment === o.applyAlignment && this.applyBorder === o.applyBorder && this.applyFont === o.applyFont && this.applyFill === o.applyFill && this.applyProtection === o.applyProtection && this.borderId === o.borderId && this.fillId === o.fillId && this.fontId === o.fontId && this.numFmtId === o.numFmtId && this.xfId === o.xfId && this.alignment.equals(o.alignment);
      }
    }]
  };
}, _node.Node);

exports.Xxf = Xxf;

var Xalignment = _decorate([(0, _node.props)('horizontal', 'indent', 'shrinkToFit', 'textRotation', 'vertical', 'wrapText')], function (_initialize16, _Node31) {
  var Xalignment = /*#__PURE__*/function (_Node32) {
    (0, _inherits2.default)(Xalignment, _Node32);

    var _super16 = _createSuper(Xalignment);

    function Xalignment(attrs) {
      var _this16;

      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      (0, _classCallCheck2.default)(this, Xalignment);
      var defaults = {
        horizontal: 'general',
        indent: 0,
        shrinkToFit: false,
        textRotation: 0,
        vertical: 'bottom',
        wrapText: false
      };
      _this16 = _super16.call(this, _objectSpread(_objectSpread({}, defaults), attrs), children);

      _initialize16((0, _assertThisInitialized2.default)(_this16));

      return _this16;
    }

    return Xalignment;
  }(_Node31);

  return {
    F: Xalignment,
    d: [{
      kind: "field",
      static: true,
      key: "name",

      value() {
        return "Xalignment";
      }

    }, {
      kind: "method",
      key: "equals",
      value: function equals(o) {
        return this.horizontal === o.horizontal && this.indent === o.indent && this.shrinkToFit === o.shrinkToFit && this.textRotation === o.textRotation && this.vertical === o.vertical && this.wrapText === o.wrapText;
      }
    }]
  };
}, _node.Node);

exports.Xalignment = Xalignment;